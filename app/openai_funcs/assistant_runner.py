import json
import asyncio
from loguru import logger
from openai import AsyncOpenAI
from app.rabbit import publish_task
from app.openai_funcs.summary import send_final_summary
from app.openai_funcs.save_load import save_result
from app.config import Settings
from app.handlers.parsers import fetch_url

settings = Settings()


client = AsyncOpenAI(
    api_key=settings.OPENAI_API_KEY
)
assistant_id = settings.ASSISTANT_ID


async def create_thread():
    try:
        thread = await client.beta.threads.create()
        logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫: {thread.id}")
        return thread
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Ç–æ–∫–∞: {e}")
        return None


def format_final_output(data: list, visited: list, pending: list, max_depth: int) -> str:
    output = [
        f"üåê –û–±—Ö–æ–¥ –∑–∞–≤–µ—Ä—à—ë–Ω –Ω–∞ –≥–ª—É–±–∏–Ω–µ {max_depth}. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {len(visited)}"]
    output.append("")

    for page in data:
        url = page.get("url", "")
        headings = page.get("headings", [])
        text = page.get("text", [])
        prices = page.get("prices", [])

        output.append(f"üîπ <{url}>")
        if headings:
            output.append("  ‚ñ´Ô∏è –ó–∞–≥–æ–ª–æ–≤–∫–∏:")
            for h in headings[:3]:
                output.append(f"    - {h}")

        if text:
            output.append("  ‚ñ´Ô∏è –¢–µ–∫—Å—Ç—ã:")
            for p in text[:2]:
                output.append(
                    f"    - {p[:100]}{'...' if len(p) > 100 else ''}")

        if prices:
            output.append(
                f"  ‚ñ´Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(prices)} —Ü–µ–Ω: {', '.join(prices[:3])}...")

        output.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏

    output.append(
        f"üï∏ –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –º–æ–º–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {len(pending)}")
    if pending:
        output.append("  –û—Å—Ç–∞–ª–∏—Å—å:")
        for p in pending[:5]:
            output.append(f"    - {p}")

    return "\n".join(output)


async def run_assistant_step(task_data: dict):
    thread_id = task_data["thread_id"]
    visited = set(task_data.get("visited", []))
    pending = task_data.get("pending", [])
    depth = task_data.get("depth", 0)
    max_depth = task_data.get("max_depth", 3)

    logger.info(
        f"[{thread_id}] –ó–∞–ø—É—Å–∫ —à–∞–≥–∞. Depth={depth}, Visited={len(visited)}, Pending={len(pending)}")

    if not pending or depth >= max_depth:
        logger.info(
            f"[{thread_id}] –ó–∞–≤–µ—Ä—à–µ–Ω–æ. –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –≥–ª—É–±–∏–Ω–∞ –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Å—Å—ã–ª–∫–∏.")
        save_result(
            thread_id,
            data=task_data["data"],
            visited=task_data["visited"],
            pending=task_data["pending"],
            max_depth=task_data["max_depth"]
        )

        return

    url = pending.pop(0)
    if url in visited:
        logger.warning(f"[{thread_id}] URL —É–∂–µ –ø–æ—Å–µ—â—ë–Ω: {url}")
        return

    logger.info(f"[{thread_id}] –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: {url}")

    await client.beta.threads.messages.create(
        thread_id=thread_id, role="user", content=f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—Ç—Ä–∞–Ω–∏—Ü—É: {url}")

    run = await client.beta.threads.runs.create(
        thread_id=thread_id,
        assistant_id=assistant_id,
    )

    while True:
        run_status = await client.beta.threads.runs.retrieve(thread_id=thread_id, run_id=run.id)
        logger.debug(f"[{thread_id}] –°—Ç–∞—Ç—É—Å —Ä–∞–Ω–Ω–µ—Ä–∞: {run_status.status}")

        if run_status.status == "completed":
            logger.info(f"[{thread_id}] –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª run")
            break

        elif run_status.status == "requires_action":
            logger.info(
                f"[{thread_id}] Run —Ç—Ä–µ–±—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º tool_call")

            tool_calls = run_status.required_action.submit_tool_outputs.tool_calls
            tool_outputs = []

            for tool in tool_calls:
                if tool.function.name == "fetch_url":
                    args = json.loads(tool.function.arguments)
                    target_url = args["url"]
                    logger.info(
                        f"[{thread_id}] –í—ã–∑–≤–∞–Ω fetch_url –¥–ª—è: {target_url}")

                    result = fetch_url(target_url)
                    task_data["visited"].append(target_url)
                    task_data["data"].append(result)

                    new_links = [
                        l for l in result["links"]
                        if l not in task_data["visited"] and l not in pending
                    ]
                    if new_links:
                        logger.info(
                            f"[{thread_id}] –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏: {len(new_links)}")
                    else:
                        logger.info(f"[{thread_id}] –ù–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

                    pending.extend(new_links)

                    tool_outputs.append({
                        "tool_call_id": tool.id,
                        "output": json.dumps(result)
                    })

            # –ò —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º –æ–¥–∏–Ω –≤—ã–∑–æ–≤
            await client.beta.threads.runs.submit_tool_outputs(
                thread_id=thread_id,
                run_id=run.id,
                tool_outputs=tool_outputs
            )

            continue

        await asyncio.sleep(1)

    task_data["depth"] = depth + 1
    task_data["pending"] = pending

    logger.info(
        f"[{thread_id}] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —à–∞–≥–∞. –ì–ª—É–±–∏–Ω–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞ –¥–æ {task_data['depth']}")
    logger.info(f"[{thread_id}] –û—Å—Ç–∞–ª–æ—Å—å —Å—Å—ã–ª–æ–∫ –≤ pending: {len(pending)}")

    save_result(
        thread_id,
        data=task_data["data"],
        visited=task_data["visited"],
        pending=task_data["pending"],
        max_depth=task_data["max_depth"]
    )
    logger.info(f"[{thread_id}] –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Ñ–∞–π–ª.")

    # üëâ –ï—Å–ª–∏ pending –ø—É—Å—Ç–æ–π ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º –∞–Ω–∞–ª–∏–∑
    if task_data["depth"] >= task_data["max_depth"]:
        await send_final_summary(
            thread_id=thread_id,
            data=task_data["data"],
            visited=task_data["visited"],
            pending=task_data["pending"],
            max_depth=task_data["max_depth"]
        )
        logger.info(
            f"[{thread_id}] –§–∏–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–¥–≤–µ–¥–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤.")
    else:
        await publish_task(settings.QUEUE_NAME, task_data)
        logger.info(f"[{thread_id}] –ó–∞–¥–∞—á–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å.")
